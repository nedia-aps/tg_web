function setOfCachedUrls(e){return e.keys().then((e) => e.map((e) => e.url)).then((e) => new Set(e))}const precacheConfig=[["index.html","5bef17cd1513b0f619967eeaa3db04dd"],["static/css/main.7f70b002.css","9b55b3f515519fc0f3441ab93df6d0a9"],["static/media/0.6c1096b8.png","6c1096b819a8916befc37fadbd2ba52f"],["static/media/1.adddc116.png","adddc116810f39c5eade5b8e6300b619"],["static/media/10.593b22e9.png","593b22e92460db79e9677baa981aa8c9"],["static/media/2.57a31035.png","57a31035f5c15725675115334955a568"],["static/media/3.57a31035.png","57a31035f5c15725675115334955a568"],["static/media/4.6eb06d89.png","6eb06d8945bc38c926ffb1acaecafa5a"],["static/media/5.8e75dca1.png","8e75dca191acd529678fdfc70aeca5f0"],["static/media/6.ab25d082.png","ab25d0829b00bac38fdfc048d3a9f92e"],["static/media/7.17719e6e.png","17719e6e51836fbee32ff83dc9271482"],["static/media/8.611ed192.png","611ed192dc62f3aa769dfff40a3dbc56"],["static/media/9.2d61e23b.png","2d61e23b14c600e956ea3c7862ab5e93"]]; const cacheName=`sw-precache-v3-sw-precache-webpack-plugin-${self.registration?self.registration.scope:""}`; const ignoreUrlParametersMatching=[/^utm_/]; const addDirectoryIndex=function(e,t){const n=new URL(e);returnn.pathname.slice(-1)==="/"&&(n.pathname+=t),n.toString()}; const cleanResponse=function(e){return e.redirected?("body"in e?Promise.resolve(e.body):e.blob()).then((t) => new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})):Promise.resolve(e)}; const createCacheKey=function(e,t,n,a){const r=new URL(e);return a&&r.pathname.match(a)||(r.search+=`${(r.search?"&":"")+encodeURIComponent(t)}=${encodeURIComponent(n)}`),r.toString()}; const isPathWhitelisted=function(e,t){if(e.length===0)return!0;const n=new URL(t).pathname;return e.some((e) => n.match(e))}; const stripIgnoredUrlParameters=function(e,t){const n=new URL(e);return n.hash="",n.search=n.search.slice(1).split("&").map((e) => e.split("=")).filter((e) => t.every((t) => !t.test(e[0]))).map((e) => e.join("=")).join("&"),n.toString()}; const hashParamName="_sw-precache"; const urlsToCacheKeys=new Map(precacheConfig.map((e) => {const t=e[0]; const n=e[1]; const a=new URL(t,self.location); const r=createCacheKey(a,hashParamName,n,/\.\w{8}\./);return[a.toString(),r]}));self.addEventListener("install",(e) => {e.waitUntil(caches.open(cacheName).then((e) => setOfCachedUrls(e).then((t) => Promise.all(Array.from(urlsToCacheKeys.values()).map((n) => {if(!t.has(n)){const a=new Request(n,{credentials:"same-origin"});return fetch(a).then((t) => {if(!t.ok)throw new Error(`Request for ${n} returned a response with status ${t.status}`);return cleanResponse(t).then((t) => e.put(n,t))})}})))).then(() => self.skipWaiting()))}),self.addEventListener("activate",(e) => {const t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then((e) => e.keys().then((n) => Promise.all(n.map((n) => {if(!t.has(n.url))return e.delete(n)})))).then(() => self.clients.claim()))}),self.addEventListener("fetch",(e) => {if(e.request.method==="GET"){let t; let n=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching);t=urlsToCacheKeys.has(n);t||(n=addDirectoryIndex(n,"index.html"),t=urlsToCacheKeys.has(n));!t&&e.request.mode==="navigate"&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(n=new URL("./index.html",self.location).toString(),t=urlsToCacheKeys.has(n)),t&&e.respondWith(caches.open(cacheName).then((e) => e.match(urlsToCacheKeys.get(n)).then((e) => {if(e)return e;throw Error("The cached response that was expected is missing.")})).catch((t) => console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)))}});